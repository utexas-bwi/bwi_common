#!/usr/bin/env python

import knowledge_representation
import rospy
import smach_ros

from knowledge_representation import LongTermMemoryConduit
from smach import StateMachine, State

from bwi_tasks.common import states, control_flow, task_machine
from bwi_kr_execution import goal_formulators, knowledge


def main():
    rospy.init_node("visit_door_list_smach")

    visitable = rospy.get_param("~visitable", "visitable_1s")
    simulation = rospy.get_param("~simulation", False)
    introspect = rospy.get_param("~introspect", False)
    State.simulation = simulation

    ltmc = knowledge_representation.get_default_ltmc()

    task_machine.get_recover_from_failure_sm(ltmc)

    # Create top state machine
    sm = StateMachine(outcomes=['succeeded', 'preempted', 'aborted'])
    # Open the container
    with sm:
        # Add states
        StateMachine.add_auto("DECIDE_DESTINATION", knowledge.GetRandomVisitableLocation(ltmc, visitable), ["succeeded"])
        StateMachine.add('GOTO_lOCATION', task_machine.generate_goal_based_task_sm(
                              goal_formulators.GoToLocationName(), ["location"]),
                         transitions={"succeeded": "DECIDE_DESTINATION",
                                      'aborted': 'DECIDE_DESTINATION'})

    if introspect:
        sis = smach_ros.IntrospectionServer('introspection_server', sm, '/SM_ROOT')
        sis.start()

    # Execute SMACH plan
    outcome = sm.execute()

    if introspect:
        rospy.spin()
        sis.stop()


if __name__ == '__main__':
    main()
